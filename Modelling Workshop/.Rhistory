knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
library(FSelector)  #FSelector package is for Feature Selection
library(tidyverse)
# Import spambase.csv and assing it to mydata
mydata <- read_csv('spambase.csv')
# Display the structure of the data file
str(mydata)
# Save the target variable as factor if necessary
mydad$class <-as.factor(mydad$class)
# Save the target variable as factor if necessary
mydata$class <-as.factor(mydata$class)
# Load caTools package
library(caTools)
#Set a seed of 123
set.seed(123)
#Generate a vector split
split <- sample.split(mydata$class, SplitRatio = 0.7)
# Create training set: training_set
training_set <- subset(mydata, split == TURE)
# Create training set: training_set
training_set <- subset(mydata, split == TRUE)
# Create test set: test_set
test_set <- subset(mydata, split == FALSE)
# Use function information.gain
att_weights <- information.gain(class~., training_set)
view(att_weights)
# Use cutoff.k() to find the most informative 15 attributes.
filtered <- cutoff.k(att_weights, 15)
print(filtered)
# Select filtered attributes
subset_data <- training_set[filtered]
# Add class column to the subset_data
subset_data$class <- training_set$class
# Install tree package
install.packages("tree")
# Install tree package
install.packages("tree")
# Load tree library
library(---)
# Build the decision tree by using tree() function
tree.spam <- tree(calss~., subset_data)
# Load tree library
library(tree)
# Build the decision tree by using tree() function
tree.spam <- tree(calss~., subset_data)
# Build the decision tree by using tree() function
tree.spam <- tree(class~., subset_data)
# Display the summary of your model
summary(tree.spam)
# Plot the decision tree
plot(tree_spam)
# Plot the decision tree
plot(tree.spam)
# Use text(modelname, pretty = 0) to display the node labels. The argument pretty = 0 instructs R to show the category names
text(tree.spam, pretty = 0)
# Plot the decision tree
plot(tree.spam)
# Build the decision tree by using tree() function
tree.spam <- tree(class~., subset_data)
# Display the summary of your model
summary(tree.spam)
# Plot the decision tree
plot(tree.spam)
# Use text(modelname, pretty = 0) to display the node labels. The argument pretty = 0 instructs R to show the category names
text( tree.spam, pretty = 0)
# Predict the class of emails in test set
tree_predict = predict(tree.spam, test_set, type = "class")
# Copy test data to results
results <- test_set
# Add predictions to the results
results$tree <-    tree_predict
tree_predict = predict(tree.spam, test_set, type = "class")
# Predict the class of emails in test set
(tree_predict = predict(tree.spam, test_set, type = "class"))
# Predict the class of emails in test set
tree_predict = predict(tree.spam, test_set, type = "class")
# Copy test data to results
results <- test_set
# Add predictions to the results
results$tree <- tree_predict
# Load package e1071
library(e1071)
# Build an SVM model by using svm() function
svm_spam  <- svm(class ~. , data = subset_data, kernel = "radial", scale = TRUE)
# Predicting the Test set results
svm_predict = predict(svm_spam, test_set)
# Build an SVM model by using svm() function
svm_spam  <- svm(class ~. , data = subset_data, kernel = "radial", scale = TRUE)
# Predicting the Test set results
svm_predict = predict(svm_spam, test_set)
# Add predictions to the dataframe results
results$svm <-  svm_predict
view(results)
# Find the correct predictions for decision tree
correctTree <- which(test_set$class == results$tree)
# Return the total number of correct predictions
length(correctTree)
# Find the correct predictions for SVM
correctSVM <- which(test_set$class == results$svm)
# Return the total number of correct predictions
length(correctSVM)
# Return the total number of correct predictions
length(correctTree)
# Return the total number of correct predictions
length(correctTree)
# Return the total number of correct predictions
length(correctSVM)
# Find the correct predictions for decision tree
correctTree <- which(test_set$class == results$tree)
# Return the total number of correct predictions
length(correctTree)
# Find the correct predictions for SVM
correctSVM <- which(test_set$class == results$svm)
# Return the total number of correct predictions
length(correctSVM)
