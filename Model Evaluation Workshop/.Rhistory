knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
# View the first 6 rows
head(BC)
library("tidyverse")
# We will use BreastCancer dataset from mlbench package
library("mlbench")
install.packages("mlbench")
library("tidyverse")
# We will use BreastCancer dataset from mlbench package
library("mlbench")
# Load BreastCancer dataset
data(BreastCancer)
# Assign BreastCancer to BC
BC <- BreastCancer
# View the first 6 rows
head(BC)
# Check the structure of the dataset
str(BC)
# Check the summary of the dataset
summary(BC)
# Remove patient Id column
BC$Id <- NULL
# Remove the missing values
BC <- na.omit(BC)
# Check the levels of the target variable. Reorder if necessary
levels(BC$CLASS)
# Remove patient Id column
BC$Id <- NULL
# Remove the missing values
BC <- na.omit(BC)
# Check the levels of the target variable. Reorder if necessary
levels(BC$Clss)
# Check the levels of the target variable. Reorder if necessary
levels(BC$Class)
# Load caTools package
library(caTools)
# Set seed to 7
set.seed(7)
# Load caTools package
library(caTools)
# Set seed to 7
set.seed(7)
# Partition the data
split = sample.split(BC$Class, SplitRatio = 0.6)
# Generate training and test sets and save as trainingset and testset
trainingset = subset(BC, split == TRUE)
testset = subset(BC, split == FALSE)
# Install and Load randomForest package
install.packages(randomForest)
install.packages("randomForest")
library(randomForest)
# Build Random Forest model and assign it to model_RF
model_RF <- randomForest(Class, data = trainingset)
# Build Random Forest model and assign it to model_RF
model_RF <- randomForest(CLASS, data = trainingset)
# Build Random Forest model and assign it to model_RF
model_RF <- randomForest(Class., data = trainingset)
# Install and Load randomForest package
install.packages("randomForest"")
library(randomForest)
library("randomForest")
# Build Random Forest model and assign it to model_RF
model_RF <- randomForest(Class., data = trainingset)
# Build Random Forest model and assign it to model_RF
model_RF <- randomForest(Class~., data = trainingset)
# Print our model
print(model_RF)
# Check the important attributes by using importance() function
importance(model_RF)
# Predict the classes for the test data
prediction_RF <- predict(model_RF, testset)
# Load Caret package for Confusion matrix
library(caret)
# The last argument sets the positive class
confusionMatrix(prediction_RF, testset$Class, positive='malignant')
